document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.screenshots-widget').forEach(widget => {
        const grid = widget.querySelector('.screenshots-grid');
        const fileInput = widget.querySelector('.screenshot-upload');
        const urlInput = widget.querySelector('.screenshot-url');
        const addUrlButton = widget.querySelector('.add-url-btn');
        const hiddenInput = widget.querySelector('.screenshots-json');

        let screenshots = [];
        try {
            screenshots = JSON.parse(hiddenInput.value || '[]');
        } catch {
            screenshots = [];
        }

        function renderGrid() {
            grid.innerHTML = '';
            screenshots.forEach((url, index) => {
                const item = document.createElement('div');
                item.className = 'screenshot-item';
                item.innerHTML = `
                    <img src="${url}" class="screenshot-thumb"/>
                    <div class="screenshot-actions">
                        <button type="button" class="move-left">‚Üê</button>
                        <button type="button" class="move-right">‚Üí</button>
                        <button type="button" class="delete">üóë</button>
                    </div>
                `;

                item.querySelector('.move-left').addEventListener('click', () => {
                    if (index > 0) {
                        [screenshots[index - 1], screenshots[index]] =
                            [screenshots[index], screenshots[index - 1]];
                        update();
                    }
                });

                item.querySelector('.move-right').addEventListener('click', () => {
                    if (index < screenshots.length - 1) {
                        [screenshots[index + 1], screenshots[index]] =
                            [screenshots[index], screenshots[index + 1]];
                        update();
                    }
                });

                item.querySelector('.delete').addEventListener('click', () => {
                    screenshots.splice(index, 1);
                    update();
                    showToast("üóë –°–∫—Ä–∏–Ω—à–æ—Ç —É–¥–∞–ª—ë–Ω");
                });

                grid.appendChild(item);
            });
            hiddenInput.value = JSON.stringify(screenshots);
        }

        function autosave() {
            const productId = window.location.pathname.split('/').filter(Boolean).slice(-2, -1)[0];
            const url = `/admin/products/product/${productId}/autosave-screenshots/`;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                },
                body: JSON.stringify({screenshots}),
            })
            .then(r => r.json())
            .then(data => {
                if (!data.success) {
                    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data.error);
                    showToast("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
                } else {
                    showToast("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
                }
            });
        }

        function showToast(message) {
            const container = document.querySelector('.screenshot-toast-container');
            if (!container) return;

            const toast = document.createElement('div');
            toast.className = 'screenshot-toast';
            toast.innerText = message;

            container.appendChild(toast);
            setTimeout(() => toast.remove(), 3000);
        }

        function update() {
            renderGrid();
            autosave();
        }

        function addUrlsFromInput() {
            const urls = urlInput.value
                .split(/[\n,]/) // —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
                .map(u => u.trim())
                .filter(u => u.length > 0);

            if (!urls.length) return;

            urls.forEach(url => screenshots.push(url));
            urlInput.value = '';
            update();
            showToast(`üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${urls.length}`);
        }

        // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
        addUrlButton.addEventListener('click', addUrlsFromInput);

        // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ Enter
        urlInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                addUrlsFromInput();
            }
        });

        // ‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        fileInput.addEventListener('change', e => {
    const files = Array.from(e.target.files);
    if (!files.length) return;

    const totalFiles = files.length;
    let uploadedFiles = 0;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    Promise.all(files.map(file => {
        const formData = new FormData();
        formData.append('file', file);

        return fetch('/admin/products/product/upload-screenshot/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            },
            body: formData
        })
        .then(r => r.json())
        .then(data => {
            if (data.url) {
                screenshots.push(data.url);
                uploadedFiles++;
            }
        });
    }))
    .then(() => {
        update();
        showToast(`üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${uploadedFiles}/${totalFiles}`);
    });

    fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
});


        renderGrid();
    });
});
