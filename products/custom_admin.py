from django.contrib.admin import AdminSite
from django.contrib.sites.models import Site

from django.contrib.admin import AdminSite
from django.contrib.sites.models import Site
from urllib.parse import parse_qs

class SiteAwareAdminSite(AdminSite):
    site_header = "Product Reviews Admin"
    site_title = "Product Reviews"
    index_title = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"

    def each_context(self, request):
        context = super().each_context(request)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ URL
        resolver = getattr(request, "resolver_match", None)
        current_model = None
        if resolver and resolver.url_name:
            current_model = resolver.url_name.split("_")[0]  # product / category / ...

        # üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –º—É–ª—å—Ç–∏—Å–∞–π—Ç
        if current_model == "category":
            context["current_site_id"] = None
            context["site_list"] = []  # ‚ùó –°–µ–ª–µ–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            return context

        # üîπ –õ–æ–≥–∏–∫–∞ –º—É–ª—å—Ç–∏—Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        site_id = request.GET.get("site")

        # "-- –í—Å–µ —Å–∞–π—Ç—ã --" –æ—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é
        if site_id == "" or site_id is None:
            request.session.pop("current_site_id", None)
        else:
            # –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç ‚Äî –∏—â–µ–º –≤ _changelist_filters
            if not site_id and "_changelist_filters" in request.GET:
                filters = request.GET["_changelist_filters"]
                parsed = parse_qs(filters)
                site_id = parsed.get("site", [None])[0]

            if site_id:
                request.session["current_site_id"] = site_id

        context["current_site_id"] = request.session.get("current_site_id")
        context["site_list"] = Site.objects.all()
        return context

    def get_app_list(self, request, app_label=None):
        resolver = getattr(request, "resolver_match", None)
        current_model = None
        if resolver and resolver.url_name:
            current_model = resolver.url_name.split("_")[0]

        # üîπ –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if current_model == "category":
            return super().get_app_list(request, app_label)

        # üîπ –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —É—á–∏—Ç—ã–≤–∞–µ–º site
        app_list = super().get_app_list(request, app_label)
        site_id = request.GET.get("site") or request.session.get("current_site_id")

        if not site_id:
            return app_list

        def model_has_data(model):
            try:
                if hasattr(model, "site"):
                    return model.objects.filter(site__id=site_id).exists()
                return True
            except Exception:
                return True

        for app in app_list:
            app["models"] = [
                m for m in app["models"]
                if model_has_data(m["model"])
            ]
        return app_list
