from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django_ckeditor_5.fields import CKEditor5Field
from slugify import slugify
from django.contrib.sites.models import Site


class Category(models.Model):
    name = models.CharField("Category Name", max_length=100, unique=True, help_text="–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –Ω–∞–ø—Ä. Action, RPG")

    def __str__(self):
        return self.name

class FAQ(models.Model):
    question = models.CharField("Question", max_length=255, help_text="–ü–∏—Ç–∞–Ω–Ω—è")
    answer = models.TextField("Answer", help_text="–í—ñ–¥–ø–æ–≤—ñ–¥—å")

    def __str__(self):
        return self.question

class Poll(models.Model):
    question = models.CharField("Poll Question", max_length=255, help_text="–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")

    def __str__(self):
        return self.question

class PollOption(models.Model):
    poll = models.ForeignKey(Poll, on_delete=models.CASCADE, related_name="options")
    text = models.CharField("Option Text", max_length=100, help_text="–í–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")

    def __str__(self):
        return f"{self.text} (Poll: {self.poll.question})"

class Game(models.Model):
    site = models.ForeignKey(
        Site,
        on_delete=models.CASCADE,
        verbose_name="Sites",
        help_text="–ù–∞ —è–∫–æ–º—É —Å–∞–π—Ç—ñ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —Ü—è –≥—Ä–∞"
    )
    title = models.CharField("Game Title", max_length=255, help_text="–ù–∞–∑–≤–∞ –≥—Ä–∏")
    slug = models.SlugField("Slug", unique=True, help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∑—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    category = models.ForeignKey(
        Category,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="games",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
        help_text="–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≥—Ä–∏"
    )
    steam_id = models.CharField("Steam ID", max_length=50, blank=True, null=True, help_text="Steam ID (–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É)")
    is_active = models.BooleanField("Is Active?", default=True, help_text="–Ø–∫—â–æ –≤–∏–º–∫–Ω–µ–Ω–æ ‚Äî –≥—Ä–∞ –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç—ñ")

    developer = models.CharField("Developer", max_length=255, blank=True, help_text="–†–æ–∑—Ä–æ–±–Ω–∏–∫")
    publisher = models.CharField("Publisher", max_length=255, blank=True, help_text="–í–∏–¥–∞–≤–µ—Ü—å")
    author = models.ForeignKey(
        "Author",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ê–≤—Ç–æ—Ä",
        help_text="–ê–≤—Ç–æ—Ä, —è–∫–∏–π –¥–æ–¥–∞–≤ –≥—Ä—É"
    )

    # Minimum requirements
    min_os = models.CharField("Minimum OS", max_length=100, blank=True,
                              help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞")
    min_processor = models.CharField("Minimum Processor", max_length=100, blank=True, help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä")
    min_ram = models.CharField("Minimum RAM", max_length=50, blank=True,
                               help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–º‚Äô—è—Ç—ñ")
    min_graphics = models.CharField("Minimum Graphics Card", max_length=150, blank=True,
                                    help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞")
    min_storage = models.CharField("Minimum Storage", max_length=50, blank=True,
                                   help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É")
    min_additional = models.CharField("Minimum Additional Info", max_length=200, blank=True,
                                      help_text="–Ü–Ω—à—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏")

    # Recommended requirements
    rec_os = models.CharField("Recommended OS", max_length=100, blank=True,
                              help_text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞")
    rec_processor = models.CharField("Recommended Processor", max_length=100, blank=True,
                                     help_text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä")
    rec_ram = models.CharField("Recommended RAM", max_length=50, blank=True,
                               help_text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –æ–±—Å—è–≥ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–º‚Äô—è—Ç—ñ")
    rec_graphics = models.CharField("Recommended Graphics Card", max_length=150, blank=True,
                                    help_text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞")
    rec_storage = models.CharField("Recommended Storage", max_length=50, blank=True,
                                   help_text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –æ–±—Å—è–≥ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É")
    rec_additional = models.CharField("Recommended Additional Info", max_length=200, blank=True,
                                      help_text="–Ü–Ω—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–∏–º–æ–≥–∏")

    logo_file = models.ImageField("Local Logo", upload_to="logos/", blank=True, null=True, help_text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É –≤—Ä—É—á–Ω—É")
    logo_url = models.URLField("Logo URL", blank=True, null=True, help_text="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø —ñ–∑ –ø–∞—Ä—Å–∏–Ω–≥—É")

    rating_manual = models.DecimalField(
        "Manual Rating",
        max_digits=2,
        decimal_places=1,
        validators=[MinValueValidator(0), MaxValueValidator(5)],
        help_text="–û—Ü—ñ–Ω–∫–∞ –≤—Ä—É—á–Ω—É (0‚Äì5)"
    )
    rating_external = models.DecimalField(
        "External Rating",
        max_digits=2,
        decimal_places=1,
        blank=True,
        null=True,
        help_text="–û—Ü—ñ–Ω–∫–∞ –∑ —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    )

    review_headline = models.CharField("Review Headline (H1)", max_length=255, help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–≥–ª—è–¥—É")
    review_body = CKEditor5Field("Review Body", help_text="HTML-–æ–≥–ª—è–¥: H2-H4, —Å–ø–∏—Å–∫–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏ 100% —à–∏—Ä–∏–Ω–∏")

    pros = models.TextField("Pros", blank=True, help_text="–ü–µ—Ä–µ–≤–∞–≥–∏ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫ (–Ω–∞—Ç–∏—Å–∫–∞–π Enter –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ)")
    cons = models.TextField("Cons", blank=True, help_text="–ù–µ–¥–æ–ª—ñ–∫–∏ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫ (–Ω–∞—Ç–∏—Å–∫–∞–π Enter –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ)")


    polls = models.ManyToManyField("Poll", related_name="games", blank=True, help_text="–û–±–µ—Ä—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, —è–∫—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü—ñ—î—é –≥—Ä–æ—é")
    faqs = models.ManyToManyField(FAQ, related_name="games", blank=True,
                                  help_text="–û–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è FAQ –¥–ª—è –≥—Ä–∏")

    created_at = models.DateTimeField(auto_now_add=True)



    def get_logo(self):
        return self.logo_file.url if self.logo_file else self.logo_url

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if not self.pk or Game.objects.get(pk=self.pk).title != self.title:
            self.slug = slugify(self.title)  # üëà –±—É–¥–µ—Ç "vpravva"
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return f"https://{self.site.domain.rstrip('/')}/game/{self.slug}"

    class Meta:
        verbose_name = "Product"
        verbose_name_plural = "Products"

class Screenshot(models.Model):
    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name="screenshots")
    image_file = models.ImageField("Local Screenshot", upload_to="screenshots/", blank=True, null=True)
    image_url = models.URLField("Screenshot URL", blank=True, null=True)

    def get_image(self):
        return self.image_file.url if self.image_file else self.image_url

class Comment(models.Model):
    class Status(models.TextChoices):
        NEW = 'new', 'New'
        APPROVED = 'approved', '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'
        REJECTED = 'rejected', '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ'

    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name="comments")
    name = models.CharField("Name", max_length=100, help_text="–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    email = models.EmailField("Email", help_text="Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–µ –ø—É–±–ª—ñ–∫—É—î—Ç—å—Å—è)")
    text = models.TextField("Comment Text", help_text="–¢–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è")
    status = models.CharField(
        "–°—Ç–∞—Ç—É—Å",
        max_length=10,
        choices=Status.choices,
        default=Status.NEW,
        help_text="–°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—è"
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = [models.Case(
            models.When(status='new', then=0),
            models.When(status='approved', then=1),
            models.When(status='rejected', then=2),
            output_field=models.IntegerField()
        )]

    def __str__(self):
        return f"{self.name} on {self.game.title}"

class Author(models.Model):
    name = models.CharField("–Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞", max_length=100, unique=True)

    def __str__(self):
        return self.name
